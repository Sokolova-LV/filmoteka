{"version":3,"file":"static/js/771.e8e6adaa.chunk.js","mappings":"uRAEaA,EAAYC,EAAAA,EAAAA,IAAH,mF,SC0CtB,EAzCkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTC,EAKYD,EALZC,MACJC,EAIgBF,EAJhBE,OACAC,EAGgBH,EAHhBG,aACAC,EAEgBJ,EAFhBI,SACAC,EACgBL,EADhBK,aACAC,EAAgBN,EAAhBM,YACEC,EAAc,IAAIC,KAAKL,GAAcM,cACrCC,GAAaL,EAAe,GAAM,KAAKM,QAAQ,GAC/CC,EAAM,yCAAqCN,GAEjD,OACI,UAACR,EAAD,YACI,gBAAKe,IAAKD,EAAQE,IAAKb,KACvB,4BACI,0BACKA,EADL,KACcM,EADd,QAGA,uCAAeG,EAAf,QACA,sCACA,uBAAIN,KACJ,oCACA,uBAAIF,GAAUA,EAAO,GAAGa,YAIvC,EC3BYC,EAASjB,EAAAA,EAAAA,OAAH,yQAeNkB,EAAQlB,EAAAA,EAAAA,GAAH,iHCqClB,GD9BwBA,EAAAA,EAAAA,EAAH,0BChBA,WAAO,IAAD,IACvB,GAA0CmB,EAAAA,EAAAA,UAAS,CAAC,GAApD,eAAOC,EAAP,KAAsBC,EAAtB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAgBhD,OAZAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAkB,mCAAG,WAAMT,GAAN,iGAEQU,EAAAA,EAAAA,IAAgBV,GAFxB,OAEbW,EAFa,OAGnBZ,EAAiBY,GAHE,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,sDAQxBJ,EAAmBT,EACtB,GAAE,CAACA,KAGA,4BACI,SAAC,KAAD,CAAMc,GAAIV,EAASW,QAAnB,UACI,SAACpB,EAAD,CAAQqB,KAAK,SAAb,wBAEJ,SAAC,EAAD,CAAWrC,MAAOmB,KAClB,SAACF,EAAD,0BACA,2BACI,yBACI,SAAC,KAAD,CAAMkB,GAAG,OAAT,qBAIJ,yBACI,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAKR,SAAC,EAAAG,SAAD,CAAUC,UAAU,wCAApB,UACI,SAAC,KAAD,QAIf,E,8LClDKC,EAAU,mCACVC,EAAW,+BAIJC,EAAkB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,UAChBF,EADgB,uCACuBD,IAFhB,uBACtBI,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDASlBC,EAAiB,mCAAG,WAAMC,GAAN,yFACNH,EAAAA,EAAAA,IAAA,UAChBF,EADgB,iCACiBD,EADjB,kBACkCM,EADlC,YADM,uBACrBF,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDASjBb,EAAe,mCAAG,WAAMV,GAAN,yFACJsB,EAAAA,EAAAA,IAAA,UAChBF,EADgB,kBACEpB,EADF,oBACqBmB,IAFjB,uBACnBI,EADmB,EACnBA,KADmB,kBAIpBA,GAJoB,2CAAH,sDASfG,EAAe,mCAAG,WAAM1B,GAAN,yFACJsB,EAAAA,EAAAA,IAAA,UAChBF,EADgB,kBACEpB,EADF,4BAC6BmB,IAFzB,uBACnBI,EADmB,EACnBA,KADmB,kBAIpBA,GAJoB,2CAAH,sDASfI,EAAkB,mCAAG,WAAM3B,GAAN,yFACPsB,EAAAA,EAAAA,IAAA,UAChBF,EADgB,kBACEpB,EADF,4BAC6BmB,IAFtB,uBACtBI,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qD","sources":["components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","utils/api.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n    display: flex;\n    gap: 40px;\n    margin-top: 20px;\n`;","import PropTypes from 'prop-types';\nimport { Container } from './MovieCard.styled';\n\nconst MovieCard = ({ movie }) => {\n    const { title,\n        genres,\n        release_date,\n        overview,\n        vote_average,\n        poster_path } = movie;\n    const releaseDate = new Date(release_date).getFullYear();\n    const userRate = ((vote_average / 10) * 100).toFixed(0);\n    const imgURL = `https://image.tmdb.org/t/p/w300${poster_path}`;\n\n    return (\n        <Container>\n            <img src={imgURL} alt={title} />\n            <div>\n                <h1>\n                    {title} ({releaseDate})\n                </h1>\n                <p>User rate: {userRate}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{genres && genres[0].name}</p>\n            </div>\n        </Container>\n    );\n};\n\nMovieCard.propTypes = {\n    movie: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        release_date: PropTypes.string.isRequired,\n        overview: PropTypes.string.isRequired,\n        vote_average: PropTypes.number.isRequired,\n        poster_path: PropTypes.string.isRequired,\n        genres: PropTypes.arrayOf(\n            PropTypes.shape({ name: PropTypes.string.isRequired })\n        ),\n    }).isRequired,\n};\n\nexport default MovieCard;","import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n    margin: 20px 64px;    \n    background-color: #007BFF;\n    color: #fff;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n\n    :hover,\n    :focus {\n        background-color: #0056b3;\n    }\n`;\n\nexport const Title = styled.h1`\n    font-size: 36px;\n    color: #007BFF;\n    text-align: center;\n    margin: 20px 0;\n`;\n\nexport const InfoLink = styled.a`\n\n`;\n\n","import { Suspense } from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { Outlet, useParams, useLocation } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\nimport { fetchInfoMovies } from 'utils/api';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { Button, Title } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n    const [selectedMovie, setSelectedMovie] = useState({});\n    const { movieId } = useParams();\n    const location = useLocation();\n    const backLink = useRef(location.state?.from ?? '/');\n\n    // movie request\n\n    useEffect(() => {\n        const fetchSelectedMovie = async movieId => {\n            try {\n                const movieResults = await fetchInfoMovies(movieId);\n                setSelectedMovie(movieResults);\n            } catch (error) {\n                console.log(error);\n            }\n        };\n        fetchSelectedMovie(movieId);\n    }, [movieId]);\n\n    return (\n        <div>\n            <Link to={backLink.current}>\n                <Button type='button'>Go back</Button>\n            </Link>\n            <MovieCard movie={selectedMovie} />\n            <Title>Movie info</Title>\n            <ul>\n                <li>\n                    <Link to=\"cast\">\n                        Cast\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"reviews\">\n                        Reviews\n                    </Link>\n                </li>\n            </ul>\n            <Suspense fallback={<div>Loading...</div>}>\n                <Outlet />\n            </Suspense>\n        </div>\n    );\n};\n\nexport default MovieDetails;","import axios from \"axios\";\n\nconst API_KEY = '4a3136bad29614034a217fa6beb2440a';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n// fetch popular movies\n\nexport const fetchPopularMovies = async () => {\n    const { data } = await axios.get(\n        `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return data;\n};\n\n// fetch movies by search\n\nexport const fetchSearchMovies = async query => {\n    const { data } = await axios.get(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1`\n    );\n    return data;\n};\n\n// fetch movies`s info\n\nexport const fetchInfoMovies = async movieId => {\n    const { data } = await axios.get(\n        `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return data;\n};\n\n// fetch movies`s cast\n\nexport const fetchCastMovies = async movieId => {\n    const { data } = await axios.get(\n        `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return data;\n};\n\n// fetch movies`s reviews\n\nexport const fetchReviewsMovies = async movieId => {\n    const { data } = await axios.get(\n        `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return data;\n};"],"names":["Container","styled","movie","title","genres","release_date","overview","vote_average","poster_path","releaseDate","Date","getFullYear","userRate","toFixed","imgURL","src","alt","name","Button","Title","useState","selectedMovie","setSelectedMovie","movieId","useParams","location","useLocation","backLink","useRef","state","from","useEffect","fetchSelectedMovie","fetchInfoMovies","movieResults","console","log","to","current","type","Suspense","fallback","API_KEY","BASE_URL","fetchPopularMovies","axios","data","fetchSearchMovies","query","fetchCastMovies","fetchReviewsMovies"],"sourceRoot":""}